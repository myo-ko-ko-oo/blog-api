// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
   directUrl = env("DIRECT_URL")
}


enum Role {
  USER
  AUTHOR
  ADMIN
}
 enum Status {
   ACTIVE
   INACTIVE
   FREEZE
   }

model User {
  id        Int      @id @default(autoincrement())
  email     String    @unique @db.VarChar(52)
  name      String    @db.VarChar(52)
  authorName String?    @db.VarChar(52)
  phone     String?
  status   Status   @default(ACTIVE)
  imageUrl  String?
  errorLoginCount Int @default(0) @db.SmallInt
  lastLogin         DateTime?
  acessToken         String?
  password  String   //  hashed password
  role      Role     @default(USER)
  posts     Post[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Type {
  MM
  ENG
  }

  model Otp {
  id            Int      @id @default(autoincrement())
  email         String   @unique @db.VarChar(52)
  otp           String
  rememberToken String
  verifyToken   String?
  count         Int      @default(0) @db.SmallInt
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  error         Int      @default(0) @db.SmallInt
}

model Post {
  id          Int             @id @default(autoincrement())
  title       String
  slug        String          @unique // SEO-friendly URL slug
  author      User            @relation(fields: [authorId], references: [id])
  authorId    Int
  type        Type           @default(ENG)
  sections    PostSection[]
  categories  PostCategory[]  // many-to-many with categories
  tags        PostTag[]       // many-to-many with tags
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model PostSection {
  id       Int    @id @default(autoincrement())
  post     Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId   Int
  content  String?
  imageUrl String?
  order    Int
}

model Category {
  id    Int            @id @default(autoincrement())
  name  String         @unique
  type        Type     @default(ENG)
  posts PostCategory[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt @default(now())
}

model PostCategory {
  postId     Int
  categoryId Int
  post     Post     @relation(fields: [postId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  @@id([postId, categoryId])
}

model Tag {
  id    Int      @id @default(autoincrement())
  name  String   @unique
  slug  String   @unique // SEO slug for tags
  posts PostTag[]
  createdAt   DateTime        @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model PostTag {
  postId Int
  tagId  Int

  post Post @relation(fields: [postId], references: [id])
  tag  Tag  @relation(fields: [tagId], references: [id])

  @@id([postId, tagId])
}

model Config {
  id    Int      @id @default(autoincrement())
  homeTitle  String    @db.VarChar(52)
  homeDescription String
  aboutTitle  String    @db.VarChar(52)
  aboutDescription String
  contactEmail  String    @db.VarChar(52)
  contactPhone String  @db.VarChar(15)
  contactAddress String @db.VarChar(52)
  
}
model Contact {
  id    Int    @id @default(autoincrement())
  name      String  @db.VarChar(52)
  email     String  @db.VarChar(52)
  message   String 
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
model Subscribe {
  id    Int    @id @default(autoincrement()) 
  email     String  @unique @db.VarChar(52)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Setting {
  id    Int    @id @default(autoincrement())
  key   String @unique @db.VarChar(50)
  value String @db.VarChar(200)
}